@page
@model WidgetNas.Pages.Components.TableModel
@{
    ViewData["Title"] = "جدول پیشرفته";
    ViewData["Description"] = "ویجت نس یک فریم ورک فارسی با پشتیبانی کامل از راست به چپ و همچنین چپ به راست است.";
}
<h1>@ViewData["Title"]</h1>
<p>
    جداول عضو جدایی ناپذیر در نمایش دیتا هستند. برای نمایش آنها میتوانید از <bidi>table</bidi> معمولی استفاده کنید ولی زمانیک میخواهید آنرا پویا کنید، باید
    ساختار پیشرفته ای را بکار ببرید. ما در این قسمت سعی کردیم بخش بزرگی از استفاده با جدول را بسازیم.
</p>

<h2>جدول با داده پیش فرض</h2>
<p>در این مثال شما تمایل دارید فقط جدول شما بدون دریافت اطلاعات از سرور و به صورت دیتای ثابت مدیریت شود.</p>
<p>برای ساخت جدول پویا دقت کنید، حتما جدول دارای ساختار <bidi>thead</bidi> و <bidi>tbody</bidi> باشد.</p>
<p>برای استفاده از کلاسهای مرتبط با جدول به قسمت <a href="/Content/Table">جدول</a> مراجعه کنید.</p>
<p>حتما برای استفاده از جدول پویا بایستی خصوصیت wn-type را با مقدار table مقدار دهی کنید.</p>
<div class="example-div">
    <div class="ltr w-90-i">
        <h3>LTR</h3>
        <table id="table1-ltr" class="tablex hover striped" wn-type="table" calendar="WNGregorianCalendar" cultureinfo="WNCultureInfo_en_US"
               oncommand="alert(command +':'+ node.privateId)">
            <thead>
                <tr>
                    <th sortable data-field='id' data-type='number' data-format='number' style="width:3rem">#</th>
                    <th filterable data-field='firstName' data-format='Name is : {0}'>First Name</th>
                    <th filterable sortable data-field='lastName'>Last Name</th>
                    <th filterable sortable data-field='position' data-format='t'>Position</th>
                    <th filterable sortable="value" data-field='date' data-type='date' data-format='shortdate'
                        condition="t.className=value.getFullYear()==2005?'secondary':''">Birth Date</th>
                    <th condition="t.innerText=node.fields['date'].value.getFullYear()">Condition</th>
                    <th command>
                        Commands
                        <button command="edit"><i class="fa-solid fa-pen-to-square"></i></button>
                        <button class="m-is-50r" command="delete"><i class="fa-solid fa-trash"></i></button>
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <th>1</th>
                    <td>omid</td>
                    <td>Moridi</td>
                    <td>WidgetNas Creator</td>
                    <td>1979-04-04</td>
                    <td></td>
                    <td></td>
                </tr>
                <tr>
                    <th>2</th>
                    <td>reza</td>
                    <td>Rahmani</td>
                    <td>Developer</td>
                    <td>2000-05-17</td>
                    <td></td>
                    <td></td>
                </tr>
                <tr>
                    <th>3</th>
                    <td>Mohammad</td>
                    <td>Keshavarz</td>
                    <td>Marketing</td>
                    <td>2005-02-20</td>
                    <td></td>
                    <td></td>
                </tr>
            </tbody>
        </table>
    </div>
    <div class="rtl w-90-i">
        <h3>RTL</h3>
        <table id="table1-rtl" class="tablex hover striped" wn-type="table" calendar="WNPersianCalendar" cultureinfo="WNCultureInfo_fa_IR"
               oncommand="alert(command +':'+ node.privateId)">
            <thead>
                <tr>
                    <th sortable data-field='id' data-type='number' data-format='number'>#</th>
                    <th filterable data-field='firstName' data-format='نام : {0}'>نام</th>
                    <th filterable sortable data-field='lastName'>نام خانوادگی</th>
                    <th filterable sortable data-field='position' data-format='t'>عنوان</th>
                    <th filterable sortable="value" data-field='date' data-type='date' data-format='shortdate'
                        condition="t.className=value.getFullYear()==2005?'secondary':''">تاریخ تولد</th>
                    <th condition="t.innerText=node.fields['date'].value.getFullYear()">شرطها</th>
                    <th command>
                        دستورات
                        <button command="edit"><i class="fa-solid fa-pen-to-square"></i></button>
                        <button class="m-is-50r" command="delete"><i class="fa-solid fa-trash"></i></button>
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <th>1</th>
                    <td>امید</td>
                    <td>مریدی</td>
                    <td>سازنده ویجت نس</td>
                    <td>1979-04-04</td>
                    <td></td>
                    <td></td>
                </tr>
                <tr>
                    <th>2</th>
                    <td>رضا</td>
                    <td>رحمانی</td>
                    <td>برنامه نویس</td>
                    <td>2000-05-17</td>
                    <td></td>
                    <td></td>
                </tr>
                <tr>
                    <th>3</th>
                    <td>محمد</td>
                    <td>کشاورز</td>
                    <td>بازاریابی</td>
                    <td>2005-02-20</td>
                    <td></td>
                    <td></td>
                </tr>
            </tbody>
        </table>
    </div>
</div>
<figure><code data-on="table1-ltr"></code></figure>
<h3>خصوصیات و قوانین ایجاد جدول</h3>
<p>برای ساخت جدول پویا بایستی موارد زیر را در نظر داشته باشید.</p>
<p>
    <h4>tablex</h4> این کلاس برای معرفی جدول پویا است، میتوانید از این کلاس استفاده کنید یا کلاس مرتبط با آن را بسازید و از کلاس خود استفاده کنید.
</p>
<p>
    <h4>calendar</h4>
    با تنظیم این خصوصیت فیلدهای تاریخی به تاریخ مد نظر نمایش داده میشوند، عدم استفاده از این خصوصیت منجر
    به استفاده از مقدار پیش فرض صفحه خواهد شد.
</p>
<p>
    <h4>cultureinfo</h4>
    با تنظیم این خصوصیت فیلدها  با مقدار فرهنگ  مد نظر نمایش داده میشوند، عدم استفاده از این خصوصیت منجر
    به استفاده از مقدار پیش فرض صفحه خواهد شد.
</p>
<h3>معرفی ستونها</h3>
<p>برای معرفی ستونها بایستی در تگ <bidi>thead</bidi> ستونهای خود را با خصوصیات مد نظر تنظیم کنید.</p>
<p>پس از تعریف یک thead بایستی یک تگ tr و سپس ستون ها با استفاده از تگ th یا td استفاده کنید. برای هر td بر حسب نیاز خصوصیات زیر را تنظیم کنید.</p>
<p>
    <h4>data-field</h4>
    این خصوصیت برای تنظیم نام فیلد در لیست دیتای شما میباشد. یا همان نام فیلد.
</p>
<p>
    <h4>data-type</h4>
    این خصوصیت جنس فیلد را مشخص میکند. این خصوصیت میتوانید یکی از موارد زیر باشد.
    <ul>
        <li><bidi>string</bidi> فیلد به صورت رشته ای است، در صورت عدم تنظیم، این مقدار پیش فرض است.</li>
        <li><bidi>number</bidi> فیلد به صورت عددی است، چه اعشار و چه غیر آن.</li>
        <li><bidi>date</bidi> فیلد به صورت تاریخ و ساعت است.</li>
    </ul>
</p>
<p>
    <h4>data-format</h4>
    اگر میخواهید بر اساس قوانین خاص برای نمایش مقدار استفاده کنید، آنرا در این خصوصیت مشخص کنید.
    برای مثال برای فیلدهای تاریخی عبارت shortdate یا longdate یا yyyy/MM/dd یا برای اعداد 0 یا 0.00 یا هر فرمت دیگر طبق استاندارد استفاده کنید.
</p>
<p>
    <h4>sortable</h4>
    اگر میخواهید ستون قابلیت منظم شدن داشته باشند، این خصوصیت مشخص میکند این ستون میتواند بر اساس دیتای آن مرتب شود.
    <br />
    اگر مقدار value را وارد کنید بر اساس مقدار آن ستون و اگر مقدار text را وارد کنید بر اساس متن نمایش داده عملیات صورت میگیرد.
    مقدار پیش فرض value است.<br />
    در فیلدهایی مانند تاریخ که در دو فرهنگ متفاوت قابل نمایش هستند این گزینه بسیار مهم است. یعنی اگر بر اساس value باشد
    بر اساس تاریخ مرتب میشود ولی اگر بر اساس text باشد، مرتب سازی بر اساس اصول متن و تاریخ تبدیل شده منظم میشود.
</p>
<p>
    <h4>filterable</h4>
    اگر میخواهید ستون قابلیت فیلتر شدن داشته باشند، این خصوصیت مشخص میکند این ستون میتواند بر اساس دیتای آن و مقدار وارد شده در جعبه متن ورودی فیلتر شود.
    <br />
    اگر مقدار value را وارد کنید بر اساس مقدار آن ستون و اگر مقدار text را وارد کنید بر اساس متن نمایش داده عملیات صورت میگیرد.
    مقدار پیش فرض value است.
</p>
<p>
    <h4>condition</h4>
    هر شرط و شروطی که میخواهید در موقع نمایش اطلاعات بررسی شود، به صورت یک تابع جاوا اسکریپت قابل برنامه ریزی است.
    برای مثال میخواهید، خانه هایی که اعداد منفی را دارند را قرمز کنید، شما میتوانید با استفاده از این رخداد، آنها را تنظیم کنید.
    <br /><bidi>condition: (t: HTMLTableCellElement, node: WNTableNode, value: any, text: string) => void</bidi>
    در پارمترهای این رخداد t به td ساخته شده اشاره دارد و مقدار node به ردیف اطلاعاتی که در آن است.
    مقدار value و text به مقادیر متناظر آن در آن سلول اشاره میکند.
</p>
<p>
    <h4>command</h4>
    اگر میخواهید به ازای هر ردیف ستونی داشته باشید که یکسری دکمه برای عملیاتهای خاص داشته باشد، این خصوصیت را در ردیف هدر مشخص کنید.
    سپس در بدنه آن هر متنی نوشته شده باشد را عنوان انتخاب کرده و هر المنت button که تعریف شده  باشد را بعنوان یک کلید برای هر ردیف دیتا نمایش میدهد.
    زمانیکه آن کلید کلیک شود، یک رخداد به نام command فراخوانی میشود. که در قسمت رخدادها توضیح داده میشود. <br />
    هر دکمه دارای یک خصوصیت command است که مقداری در آن میتوانید وارد کنید، تا زمانیکه رخداد command فراخوانی میشود، این عبارت در آن قابل دسترس باشد.
</p>
<h2>خواندن اطلاعات از سرور</h2>
<p>
    برای خواندن اطلاعات از سرور ابتدا ساختار جدول را تعیین کنید، سپس به هر روشی که شده دیتا مد نظر را از سرور خوانده و
    توسط تابع setDataSource آنها را مقدار دهی کنید.
</p>
<p>
    <h4>setDataSource</h4>
    ارسال آرایه از اطلاعات که طبق ستونهای مندرج است. این دیتا در خصوصیت dataSource که از نوع WNTableNode است ذخیره میگردد.
    <br /><bidi>setDataSource(dataSource: any, append?: boolean): void</bidi>
    <br />پارامتر append مشخص میکند، دیتا به آخر اضافه شود یا نه کل دیتا جدید است. این خصوصیت برای لود جداول lazy کار آمد است.
</p>
<p>
    <h4>WNTableNode</h4>
    هر ردیف دیتا در این ساختار در حافظه قرار میگیرد.
    <br />
    <bidi>
        privateId: number,<br />
        rowElement: HTMLTableRowElement,<br />
        fields: { [id: string]: WNTableFieldValue }
    </bidi>
    <br />
    privateId: به ازای هر ردیف یک کد یکتا از 1 الی... میگیرد.<br />
    rowElement: هر زمان در جدول یک tr ساخته شود، آن را به آن رکورد متصل میکند<br />
    fields: لیست مقداری است که توسط شما به ازای هر رکود وارد شده است. با این تفاوت که آن فیلد خود دو خصوصیت value و text دارد.
    در خصوصیت value مقدار واقعی ذخیره شده و در خصوصیت text مقداری که برای نمایش آماده سازی میشود، نمایش داده میشود.
</p>
<p>
    <h4>removeFromDataSource</h4>
    برای حذف یک رکورد در dataSource از این تابع استفاده کنید.
    <br /><bidi>removeFromDataSource(r: WNTableNode): boolean</bidi>
</p>
<p>
    <h4>updateNodeElement</h4>
    برای بروز کردن دیتای یک رکورد از این تابع استفاده کنید.
    <br /><bidi>updateNodeElement(r: WNTableNode): void </bidi>
</p>
<p>
    <h4>addToDataSource</h4>
    اگر میخواهید یک ردیف دیتا به dataSource اضافه کنید از این تابع استفاده کنید. دقت کنید ورودی فقط باید دیتای خام شما طبق جدول باشد.
    <br /><bidi>addToDataSource(r: any): WNTableNode</bidi>
</p>
<p>
    <h4>sort</h4>
    اگر میخواهید عمل مرتب شدن بر اساس ستون خاص باشد، از این تابع استفاده کنید.
    <br /><bidi>sort(colIndex: number): void</bidi>
</p>
<h2>خصوصیات</h2>
<p>
    <h4>cols</h4>
    آرایه ای از تمام ستونهای تحلیل شده میباشد.
    <br /><bidi>cols: WNTableCol[]</bidi>
    <br />
    ساختار آن عبارت است از:
    <br />
    <bidi>
        index: number,<br />
        caption: string,<br />
        field: string,<br />
        datatype: string,<br />
        sortable: WNTableTextValue,<br />
        filterable: WNTableTextValue,<br />
        format: string,<br />
        class: string,<br />
        elementInHeader: HTMLTableCellElement<br />
        elementFilter: HTMLInputElement<br />
        commandElement: HTMLButtonElement[],<br />
        condition: (t: HTMLTableCellElement, node: WNTableNode, value: any, text: string) => void
    </bidi>
    <br />
    index: شماره ستون است<br />
    caption: عنوان ستون است<br />
    field: نام فیلد دیتای آن است<br />
    datatype: نوع فیلد دیتای آن است<br />
    sortable: قابلیت مرتب سازی دارد یا نه و بر چه اساس است<br />
    filterable: قابلیت فیلتر کردن دارد یا نه و بر چه اساس است<br />
    format: فرمت نمایش داده چه شکل میباشد<br />
    class: چه کلاس هایی را باید به ستون اضافه کند<br />
    elementInHeader: المنت آن در هدر است<br />
    elementFilter: اگر فیلتر دارد به المنت ورودی آن اشاره دارد<br />
    commandElement: اگر از نوع ستون دستوری است، لیست کلیدهای الگو را معین میکند<br />
    condition: رخدادی برای فرخوانی در هنگام هر شرط را تعیین میکند
</p>
<p>
    <h4>dataSource</h4>
    لیستی از دیتای ورودی با ساختار مرتبط را دارد.
    <br /><bidi>dataSource: WNTableNode[]</bidi>
</p>
<p>
    <h4>currentPage</h4>
    اگر از خاصیت صفحه بندی استفاده کردید، شماره صفحه انتخاب شده را مشخص میکند.
    <br /><bidi>currentPage: number</bidi>
</p>
<p>
    <h4>selectedItem</h4>
    زمانیکه بر روی هر ردیف جدول کلیک کنید، آن ردیف انتخاب شده و در این خصوصیت مشخص میشود.
    <br /><bidi>selectedItem: WNTableNode</bidi>
</p>
<h2>رخدادها</h2>
<p>
    <h4>beforeFilter</h4>
    قبل از عملیات فیلتر کردن داده ها صدا زده شده و اگر مقدار false برگرداند عمل لغو میشود.
    <br /><bidi>beforeFilter: (t: IWNTable) => boolean</bidi>
</p>
<p>
    <h4>afterFilter</h4>
    بعد از فیلتر کردن صدا زده میشود.
    <br /><bidi>afterFilter: (t: IWNTable) => void</bidi>
</p>
<p>
    <h4>beforeSort</h4>
    قبل از عملیات مرتب سازی داده ها صدا زده شده و اگر مقدار false برگرداند عمل لغو میشود.
    <br /><bidi>beforeSort: (t: IWNTable) => boolean</bidi>
</p>
<p>
    <h4>afterSort</h4>
    بعد از مرتب سازی صدا زده میشود.
    <br /><bidi>afterSort: (t: IWNTable) => void</bidi>
</p>
<p>
    <h4>beforeSelected</h4>
    قبل از انتخاب ردیف صدا زده شده و اگر مقدار false برگرداند عمل لغو میشود.
    <br /><bidi>beforeSelected: (t: IWNTable, oldNode: WNTableNode, newNode: WNTableNode) => boolean</bidi>
</p>
<p>
    <h4>selectionChanged</h4>
    بعد از آنکه ردیفی انتخاب شد صدا زده میشود.
    <br /><bidi>selectionChanged: (t: IWNTable, oldNode: WNTableNode, newNode: WNTableNode) => void</bidi>
</p>
<p>
    <h4>beforePageChange</h4>
    قبل از انتخاب صفحه جدید صدا زده شده و اگر مقدار false برگرداند عمل لغو میشود.
    <br /><bidi>beforePageChange: (t: IWNTable, oldPage: number, newPage: number) => boolean</bidi>
</p>
<p>
    <h4>afterPageChange</h4>
    بعد از تغییر صفحه صدا زده میشود.
    <br /><bidi>afterPageChange: (t: IWNTable, oldpage: number, newpage: number) => void</bidi>
</p>
<p>
    <h4>command</h4>
    زمانیکه بر روی یک دکمه دستوری که در بالاتر نحوه ساخت آن گفته شد کلیک شود، این رخداد فراخوانده میشود.<br />
    در پارامتر command دستوری که در آن دکمه مشخص کردید ارسال میگردد و همین طور ردیف مرتب با آن در node.<br />
    به همین منظور شما به راحتی میتوانید هر ردیف جدول را هر آنگونه که میخواهید مدیریت کنید. برای مثال حذف، ویرایش، یا حتی محتوی بیشتری از آن نمایش دهید.
    <br /><bidi>command: (t: IWNTable, command:string,node: WNTableNode) => void</bidi>
</p>
<p>
    <h4></h4>
    <br /><bidi></bidi>
</p>
<p>
    <h4></h4>
    <br /><bidi></bidi>
</p>
<p>
    <h4></h4>
    <br /><bidi></bidi>
</p>
<p>
    <h4></h4>
    <br /><bidi></bidi>
</p>
<div class="example-div">
    <div class="ltr" id="form1">
        <h3>LTR</h3>
        <table id="table2-ltr" class="tablex hover striped" wn-type="table" calendar="WNGregorianCalendar" cultureinfo="WNCultureInfo_en_US">
            <thead>
                <tr>
                    <th sortable data-field='privateId' data-type='number'>#</th>
                    <th filterable sortable data-field='Student name' data-type='string'>Name</th>
                    <th filterable sortable data-field='Exam name' data-type='string'>Exam</th>
                    <th filterable sortable data-field='Exam date' data-type='date' data-format='shortdate'>Date</th>
                    <th filterable sortable data-field='Exam points' data-type='number' aggregate="avg">Points</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="5">
                        <nav class="pagination justify-content-center s-m" page-size='10'>
                            <button class="first"><i class="fa-solid fa-backward-fast"></i></button>
                            <button class="previous"><i class="fa-solid fa-backward"></i></button>
                            <button>1</button>
                            <button>2</button>
                            <button>3</button>
                            <button>4</button>
                            <button>5</button>
                            <button>6</button>
                            <button>7</button>
                            <button class="next"><i class="fa-solid fa-forward"></i></button>
                            <button class="last"><i class="fa-solid fa-forward-fast"></i></button>
                        </nav>
                    </td>
                </tr>
            </tfoot>
        </table>
        <script>
            WN(document).ready(async () => {
                await Get(null, '/data/examslist.en.json').then((r) => {
                    WN('table2-ltr').wn.setDataSource(r, false);
                }).catch((e) => {
                    console.log(e);
                });
            });
        </script>
    </div>
    <div class="rtl">
        <h3>RTL</h3>
        <table id="table2-rtl" class="tablex hover striped" wn-type="table" calendar="WNPersianCalendar" cultureinfo="WNCultureInfo_fa_IR">
            <thead>
                <tr>
                    <th sortable data-field='privateId' data-type='number'>#</th>
                    <th filterable sortable data-field='Student name' data-type='string'>نام</th>
                    <th filterable sortable data-field='Exam name' data-type='string'>آزمون</th>
                    <th filterable sortable data-field='Exam date' data-type='date' data-format='shortdate'>تاریخ</th>
                    <th filterable sortable data-field='Exam points' data-type='number' aggregate="avg">نمره</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="5">
                        <nav class="pagination justify-content-center s-m" page-size='10'>
                            <button class="first"><i class="fa-solid fa-forward-fast"></i></button>
                            <button class="previous"><i class="fa-solid fa-forward"></i></button>
                            <button>1</button>
                            <button>2</button>
                            <button>3</button>
                            <button>4</button>
                            <button>5</button>
                            <button>6</button>
                            <button>7</button>
                            <button class="next"><i class="fa-solid fa-backward"></i></button>
                            <button class="last"><i class="fa-solid fa-backward-fast"></i></button>
                        </nav>
                    </td>
                </tr>
            </tfoot>
        </table>
        <script>
            WN(document).ready(async () => {
                await Get(null, '/data/examslist.fa.json').then((r) => {
                    WN('table2-rtl').wn.setDataSource(r, false);
                }).catch((e) => {
                    console.log(e);
                });
            });
        </script>
    </div>
</div>
<figure><code data-on="form1"></code></figure>
<h2>صفحه بندی</h2>
<p>
    اگر دیتا بلند بالایی دارید و لیست شدن آن پشت سر هم آزار دهنده است میتوانید آن را صفحه بندی کنید،
    بدین منظور برای ساخت شکل نمایش آن از <a href="/Components/Pagination">شماره صفحه</a> استفاده کنید.
    سپس قوانین زیر را بر روی آن اعمال کنید.
</p>
<ul>
    <li>در هر قسمت از صفحه که خواستید آنرا قرار دهید ولیکن حتما از کلاس <bidi>pagination</bidi> استفاده کنید.</li>
    <li>تعداد صفحاتی که در نظر دارید نمایش داده شود را به صورت <bidi>button</bidi> معرفی کنید. تعدادی که قرار دادید، از آن استفاده خواهد شد.</li>
    <li>اگر میخواهید دکمه ابتدا را داشته باشید، یک دکمه با کلاس <bidi>first</bidi> بسازید.</li>
    <li>اگر میخواهید دکمه صفحه قبل را داشته باشید، یک دکمه با کلاس <bidi>previous</bidi> بسازید.</li>
    <li>اگر میخواهید دکمه صفحه بعد را داشته باشید، یک دکمه با کلاس <bidi>next</bidi> بسازید.</li>
    <li>اگر میخواهید دکمه آخرین صفحه را داشته باشید، یک دکمه با کلاس <bidi>last</bidi> بسازید.</li>
    <li>هر استایل و هر شکلی که تمایل دارید بسازید و انواع کلاسها را قرار دهید.</li>
    <li>برای نمایش تعداد ردیف در هر صفحه از خصوصیت <bidi>page-seize</bidi> استفاده کنید. هر تعداد ردیف را وارد کنید، آن تعداد در هر صفحه نمایش داده خواهد شد.</li>
</ul>

<h2>مثال از رخدادها</h2>
<div class="example-div">
    <div class="ltr w-90-i" id="form2">
        <table id="table3-ltr"
               class="tablex hover striped"
               wn-type="table"
               calendar="WNGregorianCalendar" cultureinfo="WNCultureInfo_en_US"
               onbeforefilter='WriteLog("Before Filter"); return true;'
               onafterfilter='WriteLog("After Filter")'
               onbeforesort='WriteLog("Before Sort"); return true;'
               onaftersort='WriteLog("After Sort")'
               onbeforeselected='WriteLog("Before Select"); return true;'
               onselectionchanged='WriteLog("Selected Changed")'
               onbeforepagechange='WriteLog("Before Page Change"); return true;'
               onafterpagechange='WriteLog("Page Changed")'
               oncommand='WriteLog("Command " + command + " id: " + node.privateId)'>
            <thead>
                <tr>
                    <th sortable data-field='privateId' data-type='number'>#</th>
                    <th filterable sortable data-field='Student name' data-type='string'>Name</th>
                    <th filterable sortable data-field='Exam name' data-type='string'>Exam</th>
                    <th filterable sortable data-field='Exam date' data-type='date' data-format='shortdate'>Date</th>
                    <th filterable sortable data-field='Exam points' data-type='number'>Points</th>
                    <th command>
                        <button command="view"><i class="fa-regular fa-eye"></i></button>
                        <button command="edit" class="m-is-50r"><i class="fa-solid fa-pen-to-square"></i></button>
                        <button command="delete" class="m-is-50r"><i class="fa-solid fa-trash"></i></button>
                    </th>
                </tr>
            </thead>
            <tbody>
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="5">
                        <nav class="pagination justify-content-center s-m" page-size='5'>
                            <button class="first"><i class="fa-solid fa-backward-fast"></i></button>
                            <button class="previous"><i class="fa-solid fa-backward"></i></button>
                            <button>1</button>
                            <button>2</button>
                            <button>3</button>
                            <button>4</button>
                            <button>5</button>
                            <button>6</button>
                            <button>7</button>
                            <button class="next"><i class="fa-solid fa-forward"></i></button>
                            <button class="last"><i class="fa-solid fa-forward-fast"></i></button>
                        </nav>
                    </td>
                </tr>
            </tfoot>
        </table>

        <script>
            WN(document).ready(async () => {
                await Get(null, '/data/examslist.en.json').then((r) => {
                    WN('table3-ltr').wn.setDataSource(r, false);
                }).catch((e) => {
                    console.log(e);
                });
            });
            function WriteLog(msg) {
                WN('EventLog').element.innerHTML = msg + '<br/>' + WN('EventLog').element.innerHTML;
            }
        </script>
    </div>
    <div class="ltr">
        <h3>Event</h3>
        <div id='EventLog'>
        </div>
    </div>
</div>
<figure><code data-on="form2"></code></figure>
<h2>گروه بندی و سر جمع</h2>
<p>بعضی از مواقع نیاز داریم جدول را بر اساس یک گروه بندی خاص به نمایش بگذاریم. این جدول با پشتیبانی از 10 گروه بندی که از 0 تا 9
    مقدار دهی میشود، قابلیت نمایش را دارد، اگر تعداد بیشتری گروه بندی خواستید بایستی در فایل css خصوصیات group-10 و به بعد را تعریف کنید.
</p>
<p>برای گروه بندی، بایستی اسم فیلدهای موجود در دیتاسورس خود را با جدا ساز , در خصوصیت groups وارد کنید. یا توسط جاوا اسکریپت این خصوصیت را مقدار دهی کنید. که آرایه ای از نام فیلدها است.</p>
<p>اگر میخواهید در گروه بندی یا به صورت کلی سرجمع داشته باشید بایستی زمانیکه در هدر به تعریف کردن مشخصات ستون مشغول هستید خصوصیت 
    aggregate را نیز مقدار دهی کنید.<br />
    sum: به معنی جمع ستون<br />
    avg: به معنی میانگین ستون<br />
    count: به معنی تعداد در ستون<br />
    max: به معنی بیشترین مقدار در ستون<br />
    min: به معنی کمترین مقدار در ستون<br />

</p>
<div class="example-div">
    <div class="rtl w-90-i" id="form3">
        <div class="responsive h-50vh">
            <table id="table4-rtl"
                   class="tablex hover striped"
                   wn-type="table"
                   calendar="WNPersianCalendar" cultureinfo="WNCultureInfo_fa_IR"
                   groups="Col1,Col2:text,Col3,Col4,Col5">
                <thead>
                    <tr>
                        <th filterable sortable data-field='Col6' data-type='number' aggregate="sum">عدد 1</th>
                        <th filterable sortable data-field='Col7' data-type='number' aggregate="avg">عدد 2</th>
                        <th filterable sortable data-field='Col8' data-type='number'>عدد 3</th>
                        <th command>
                            <button command="view"><i class="fa-regular fa-eye"></i></button>
                            <button command="edit" class="m-is-50r"><i class="fa-solid fa-pen-to-square"></i></button>
                            <button command="delete" class="m-is-50r"><i class="fa-solid fa-trash"></i></button>
                        </th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="5">
                            <nav class="pagination justify-content-center s-m" page-size='5'>
                                <button class="first"><i class="fa-solid fa-backward-fast"></i></button>
                                <button class="previous"><i class="fa-solid fa-backward"></i></button>
                                <button>1</button>
                                <button>2</button>
                                <button>3</button>
                                <button>4</button>
                                <button>5</button>
                                <button>6</button>
                                <button>7</button>
                                <button class="next"><i class="fa-solid fa-forward"></i></button>
                                <button class="last"><i class="fa-solid fa-forward-fast"></i></button>
                            </nav>
                        </td>
                    </tr>
                </tfoot>
            </table>
        </div>
        <button onclick="AppendData()">اطلاعات بیشتر</button>
        <script>
            WN(document).ready(async () => {
                AppendData();
            });
            function AppendData() {
                let r = [];
                for (i = 0; i < 10; i++) {
                    let t = {
                        Col1: 'اطلاعات ' + (Math.floor(Math.random() * 2) + 1),
                        Col2: 'بخش ' + (Math.floor(Math.random() * 2) + 1),
                        Col3: 'قسمت ' + (Math.floor(Math.random() * 2) + 1),
                        Col4: 'ناحیه ' + (Math.floor(Math.random() * 2) + 1),
                        Col5: 'طبقه ' + (Math.floor(Math.random() * 2) + 1),
                        Col6: Math.floor(Math.random() * 300),
                        Col7: Math.floor(Math.random() * 600),
                        Col8: Math.floor(Math.random() * 900)
                    }
                    r.push(t);
                }
                WN('table4-rtl').wn.setDataSource(r, true);
            }
        </script>
    </div>
</div>
<figure><code data-on="form3"></code></figure>
<h2>ریسپانسیو کردن جدول</h2>
<p>برای ریسپانسیو کردن جدول باید کل جدول را در یک div قرار داد و به آن div کلاس responsive را اضافه کرد و هر اندازه ای که مد نظر است به آن داد.</p>
<p>جدول در زمان ریسپانسیو شدن، عنوان و پانوشت به صورت چسبان همیشه نمایش داده میشود.</p>
