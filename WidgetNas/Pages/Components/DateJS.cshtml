@page
@model WidgetNas.Pages.Components.DateJSModel
@{
    ViewData["Title"] = "اسکریپت تاریخ";
    ViewData["Description"] = "ویجت نس یک فریم ورک فارسی با پشتیبانی کامل از راست به چپ و همچنین چپ به راست است.";
}
<h1>@ViewData["Title"]</h1>
<p>
    تاریخ، یکی از ارکان ورودی اطلاعات و نمایش زمان است، شاید برای افرادی که با تاریخ میلادی کار میکنند، خیلی مورد نیاز نباشد،
    ولی برای فارسی زبانان، مورد مهمی است، در این سند، سعی بر آن شده ارکان تاریخ و فرهنگ درج توصیح داده شود.
</p>
<h2>اطلاعات فرهنگ چیست؟</h2>
<p>
    اطلاعات فرهنگ یا همان CultureInfo مجموعه ای از تنظیمات است که به فریم ورک نحوه نمایش اعداد، تاریخ و متون را مشخص میکند.<br />
    در حقیقت اطلاعات فرهنگ یک کلاس حاوی اطلاعات زیر است.
</p>
<figure><code data-on="_code" data-mode="text/typescript">
interface IWNCultureInfo  {
    readonly displayName: string;
    readonly englishName: string;
    readonly threeLetterISOLanguageName: string;
    readonly twoLetterISOLanguageName: string;
    readonly DateTimeFormat: {
        readonly amDesignator: string;
        readonly abbreviatedDayNames: string[];
        readonly abbreviatedMonthNames: { [Calendar: string]: string[] };
        readonly dateSeparator: string;
        readonly dayNames: string[];
        readonly firstDayOfWeek: number
        readonly fullDateTimePattern: string;
        readonly longDatePattern: string;
        readonly longTimePattern: string;
        readonly monthDayPattern: string;
        readonly monthNames: { [Calendar: string]: string[] };
        readonly pmDesignator: string;
        readonly shortDatePattern: string;
        readonly shortTimePattern: string;
        readonly shortestDayNames: string[];
        readonly timeSeparator: string;
        readonly yearMonthPattern: string;
        readonly holiday: number;
    },
    readonly NumberFormat: {
        readonly currencyDecimalDigits: number;
        readonly currencyDecimalSeparator: string;
        readonly currencyGroupSeparator: string;
        readonly currencyGroupSizes: number[];
        readonly currencyNegativePattern: number;
        readonly currencyPositivePattern: number;
        readonly currencySymbol: string;
        readonly nanSymbol: string;
        readonly nativeDigits: string[];
        readonly negativeInfinitySymbol: string;
        readonly negativeSign: string;
        readonly numberDecimalDigits: number;
        readonly numberDecimalSeparator: string;
        readonly numberGroupSeparator: string;
        readonly numberGroupSizes: number[];
        readonly numberNegativePattern: number;
        readonly perMilleSymbol: string;
        readonly percentDecimalDigits: number;
        readonly percentDecimalSeparator: string;
        readonly percentGroupSeparator: string;
        readonly percentGroupSizes: number[];
        readonly percentNegativePattern: number;
        readonly percentPositivePattern: number;
        readonly percentSymbol: string;
        readonly positiveInfinitySymbol: string;
        readonly positiveSign: string;
    },
    readonly TextInfo: {
        readonly ansiCodePage: number;
        readonly cultureName: string;
        readonly ebcdicCodePage: number;
        readonly isRightToLeft: boolean;
        readonly lcid: number;
        readonly listSeparator: string;
        readonly macCodePage: number;
        readonly oemCodePage: number;
    }
}
</code></figure>
<p>با ساخت یک کلاس از این جنس، شما میتوانید فرهنگ مد نظر خود را بسازید، ما به طور پیش فرض دو فرهنگ انگلیسی آمریکایی و پارسی ایرانی را به شکل زیر تعریف کردیم.</p>
<figure><code data-on="_code" data-mode="text/typescript">
class WNCultureInfo_fa_IR implements IWNCultureInfo {
    readonly displayName = 'پارسی';
    readonly englishName = 'Persian';
    readonly threeLetterISOLanguageName = 'fas';
    readonly twoLetterISOLanguageName = 'fa';
    readonly DateTimeFormat = {
        amDesignator: 'ق.ظ',
        abbreviatedDayNames: ["يكش", "دوش", "س.ش", "چ.ش", "پنج", "جمع", "شنب"],
        abbreviatedMonthNames: {
            "WNPersianCalendar": ["فرو", "ارد", "خرد", "تیر", "مرد", "شهر", "مهر", "آبا", "آذر", "دی", "بهم", "اسف", ""],
            "WNGregorianCalendar": ["ژان", "فور", "مار", "آپر", "می", "جون", "جول", "آگو", "سپت", "اکت", "نوا", "دسا", ""],
            "WNJulianCalendar": ["ژان", "فور", "مار", "آپر", "می", "جون", "جول", "آگو", "سپت", "اکت", "نوا", "دسا", ""],
            "WNHijriCalendar": ["محر", "صفر", "راول", "رثانی", "جاول", "جثانی", "رجب", "شعب", "رمض", "شوا", "ذقعده", "ذحجه", ""],
        },
        dateSeparator: '/',
        dayNames: ["يكشنبه", "دوشنبه", "سه شنبه", "چهارشنبه", "پنجشنبه", "جمعه", "شنبه"],
        firstDayOfWeek: 6,
        fullDateTimePattern: 'dddd, d MMMM yyyy hh:mm:ss tt',
        longDatePattern: 'dddd, d MMMM yyyy',
        longTimePattern: 'h:mm:ss tt',
        monthDayPattern: 'd MMMM',
        monthNames: {
            "WNPersianCalendar": ["فروردین", "اردیبهشت", "خرداد", "تیر", "مرداد", "شهریور", "مهر", "آبان", "آذر", "دی", "بهمن", "اسفند", ""],
            "WNGregorianCalendar": ["ژانویه", "فوریه", "مارچ", "آپریل", "می", "جون", "جولای", "آگوست", "سپتامبر", "اکتبر", "نوامبر", "دسامبر", ""],
            "WNJulianCalendar": ["ژانویه", "فوریه", "مارچ", "آپریل", "می", "جون", "جولای", "آگوست", "سپتامبر", "اکتبر", "نوامبر", "دسامبر", ""],
            "WNHijriCalendar": ["محرم", "صفر", "ربیع الاول", "ربیع الثانی", "جمادی الاول", "جمادی الثانی", "رجب", "شعبان", "رمضان", "شوال", "ذوالقعده", "ذوالحجه", ""],
        },
        pmDesignator: 'ب.ظ',
        shortDatePattern: "dd/MM/yyyy",
        shortTimePattern: "hh:mm tt",
        shortestDayNames: ["ی", "د", "س", "چ", "پ", "ج", "ش"],
        timeSeparator: ':',
        yearMonthPattern: 'MMMM, yyyy',
        holiday: 5
    };
    readonly NumberFormat = {
        currencyDecimalDigits: 2,
        currencyDecimalSeparator: "/",
        currencyGroupSeparator: ",",
        currencyGroupSizes: [3],
        currencyNegativePattern: 6,
        currencyPositivePattern: 1,
        currencySymbol: "ريال",
        nanSymbol: "ناعدد",
        nativeDigits: ["۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹"],
        negativeInfinitySymbol: "-∞",
        negativeSign: "-",
        numberDecimalDigits: 2,
        numberDecimalSeparator: "/",
        numberGroupSeparator: ",",
        numberGroupSizes: [3],
        numberNegativePattern: 1,
        perMilleSymbol: "‰",
        percentDecimalDigits: 2,
        percentDecimalSeparator: "/",
        percentGroupSeparator: ",",
        percentGroupSizes: [3],
        percentNegativePattern: 1,
        percentPositivePattern: 1,
        percentSymbol: "%",
        positiveInfinitySymbol: "∞",
        positiveSign: "+"
    };
    readonly TextInfo = {
        ansiCodePage: 1256,
        cultureName: "fa-IR",
        ebcdicCodePage: 20420,
        isRightToLeft: true,
        lcid: 1065,
        listSeparator: "؛",
        macCodePage: 10004,
        oemCodePage: 720
    };
}

</code></figure>
        <p>در کلاس بالا تقریبا همه موارد روشن و هویدا است، ولیکن چند مورد وجود دارد که قابل توضیح است.</p>
        <p>
            در قسمت DateTimeFormat بایستی، نام بروج را درج کنید، ولیکن هر نوع فرهنگ، از ساختار نوشتاری خود بهره میبرد،
            برای مثال، اسامی برج ها در فرهنگ انگلیسی بایستی به انگلیسی بوده و در فارسی بایستی به فارسی نمایش داده شود،
            اگر شما میخواهید فرهنگ عربی بسازید، بایستی اسامی بروج به عربی باشد.
        </p>
        <p>بروج از آرایه 13 عنصری تشکیل شده است، زیرا در برخی از تقویم ها، 13 برج وجود دارد، مانند تقویم اسکندری، اگر تقویم شما 12 برج دارد، فقط 12 گزینه را تعیین کنید و آخری را خالی بگذارید.</p>
        <p>
            برای معرفی اسامی روزها، از ابتدای روز میلادی در نظر گرفته شده است، یعنی یکشنبه، پس اسامی را بر این اساس تنظیم کنید یعنی یکشنبه در آن زبان چه میباشد.
            در خصوصیت firstDayOfWeek مشخص میکنید، اولین روز هفته در آن فرهنگ از چندمین روز هفته میلادی شروع میشود، برای تشخیص کافیست، طبق ورود اسامی، از صفر شمارده و عددش را مشخص کنید.
        </p>
        <div class="alert callout-start info">در صورتیکه یک فرهنگ جدید ساختید، آنرا برای گسترش بیشتر این فریم ورک برای ما ارسال کنید.</div>
        <h2>فرهنگ و تقویم پیش فرض</h2>
        <p>فریم ورک پس از بارگذاری صفحه، به طور خودکار، تقویم و اطلاعات فرهنگ را بر اساس تنظیمات صفحه و مرورگر تعیین میکند، هر چند شما نیز میتوانید، آنها را مشخص کنید.</p>
        <p>
            <strong>wnConfig.cultureInfo</strong><br />
            اطلاعات فرهنگ پیش فرض، در این متغییر در سطح عمومی معرفی میشود.
        </p>
        <p>
            <strong>wnConfig.calendar</strong><br />
            تقویم پیش فرض، در این متغییر در سطح عمومی معرفی میشود.
        </p>
        <p>
            اگر زبان پیش فرض صفحه یا زبان مرورگر fa باشد، فرهنگ پیش فرض WNCultureInfo_fa_IR انتخاب شده و تقویم WNPersianCalendar.<br />
            در غیر اینصورت، فرهنگ WNCultureInfo_en_US و تقویم WNGregorianCalendar انتخاب میشود.
        </p>
        <hr />
        <p>در ادامه به معرفی تقویم و نحوه ساخت دیگر تقویم ها اشاره خواهیم کرد.</p>
        <h2>تقویم</h2>
        <p>تقویم روشی برای تبدیل تعداد روزها از ابتدای سال ژولین است، برای مثال اولین روز تاریخ شمسی 1948320 روز با اولین روز ژولین فاصله دارد. برای اطلاع بیشتر میتوانید <a href="https://www.fourmilab.ch/documents/calendar/" target="_blank">اینجا</a> را مطالعه کنید.</p>
        <h2>چگونه یک تقویم بسازیم؟</h2>
        <p>برای ساخت یک تقویم کافیست کلاسی به خصوصیات زیر بسازید</p>
<figure><code data-on="_code" data-mode="text/typescript">
    class WN(CalendarName] {
        constructor() {
            this.Name = "[CalendarName]";
            this.LeapMonth = 12;
            this.monthsInYear = 12;
        }
        getDayOfWeek(Year, Month, Day) {
            return x;
        }
        getDayOfYear(Year, Month, Day) {
            return x;
        }
        getDaysInMonth(Year, Month) {
            return x;
        }
        getDaysInYear(Year) { return this.isLeapYear(Year) ? 366 : 365; }
        getWeekOfYear(Year, Month, Day) {
            return x;
        }
        isLeapDay(Year, Month, Day) {
            return this.isLeapMonth(Year, Month) && Day === 30;
        }
        isLeapMonth(Year, Month) { return this.isLeapYear(Year) && Month === this.LeapMonth; }
        isLeapYear(Year) {
            return x;
        }
        getDaysFromBase(Year, Month, Day) {
            return x;
        }
        getYearMonthDayFromDays(jd) {
            return { Year: year, Month: month, Day: day };
        }
    }
</code></figure>
        <p>بدیهی است برای گسترش تقویم خود، توابع دیگری نیاز داشته باشید که بخواهید اضافه کنید، ولیکن این توابع به صورت اجباری بایستی پیاده سازی شود.</p>
        <p>
            <strong>Name</strong><br />
            نام تقویم به صورت متنی، معمولا با نام کلاس یکی است.
        </p>
        <p>
            <strong>LeapMonth</strong><br />
            چه برجی از سال، میتواند کبیسه باشد.
        </p>
        <p>
            <strong>MonthsInYear</strong><br />
            در سال چند برج وجود دارد.
        </p>
        <p>
            <strong>getDayOfWeek</strong><br />
            getDayOfWeek(Year: number, Month: number, Day: number): number<br />
            شماره روز هفته را بر اساس سال، برج و روز بر میگرداند، برای مثال 1400، 02، 27 روز دوشنبه است پس مقدار 1 را برمیگرداند.
        </p>
        <p>
            <strong>getDayOfYear</strong><br />
            getDayOfYear(Year: number, Month: number, Day: number): number<br />
            تاریخ مد نظر، چندمین روز از ابتدای سال است.برای مثال 1400، 02، 27 روز 58 از ابتدای سال است.
        </p>
        <p>
            <strong>getDaysInMonth</strong><br />
            getDaysInMonth(Year: number, Month: number): number<br />
            در سال و برج مورد نظر، چند روز وجود دارد، تابع بایستی تعداد روز برجی که در سال کبیسه است را نیز در نظر بگیرد.
        </p>
        <p>
            <strong>getDaysInYear</strong><br />
            getDaysInYear(Year: number): number<br />
            در سال مشخص شده چند روز وجود دارد، اگر سال کبیسه باشد، بایستی مشخص شود.
        </p>
        <p>
            <strong>getWeekOfYear</strong><br />
            getWeekOfYear(Year: number, Month: number, Day: number): number<br />
            تاریخ گفته شده، هفته چندم از ابتدای سال است.
        </p>
        <p>
            <strong>isLeapDay</strong><br />
            isLeapDay(Year: number, Month: number, Day: number): boolean<br />
            آیا تاریخ مشخص شده روز سال کبیسه است یا خیر.
        </p>
        <p>
            <strong>isLeapMonth</strong><br />
            isLeapMonth(Year: number, Month: number): boolean<br />
            آیا برج مشخص شده، برج کبیسه است یا خیر.
        </p>
        <p>
            <strong>isLeapYear</strong><br />
            isLeapYear(Year: number): boolean<br />
            آیا سال مشخص شده کبیسه است یا خیر.
        </p>
        <p>
            <strong>getDaysFromBase</strong><br />
            getDaysFromBase(Year: number, Month: number, Day: number): number<br />
            یکی از مهمترین توابع است، وظیفه آن محاسبه تعداد روزهای گذشته از ابتدای سال ژولین است.
        </p>
        <p>
            <strong>getYearMonthDayFromDays</strong><br />
            getYearMonthDayFromDays(mNum: number): { Year: number, Month: number, Day: number }<br />
            این تابع برعکس تابع بالاست، یعنی این تعداد روز گذشته از ابتدای تاریخ ژولین، چه تاریخی در این تقویم است.
        </p>
        <h2>تقویم های پیاده سازی شده</h2>
        <p>در این فریم ورک، تقویم های زیر به صورت پیش فرض و با اسامی کلاس های زیر تعریف شده است.</p>
        <ul>
            <li>WNJulianCalendar: تقویم ژولین</li>
            <li>WNGregorianCalendar: تقویم میلادی</li>
            <li>WNPersianCalendar: تقویم پارسی یا جلالی یا هجری شمسی</li>
            <li>WNHijriCalendar: تقویم هجری قمری</li>
        </ul>
        <h2>نحوه استفاده</h2>
        <p>در ابتدا بگوییم، تمامی خروجی های تاریخی به صورت تاریخ استاندارد میلادی است، فقط توابع قابلیت تبدیل و نمایش و محاسبات خاص را بر روی تقویم انتخاب شده دارند.</p>
        <p>برای استفاده از تقویم ها و اعمال محاسبات بر روی آنها بایستی متغییری از جنس <bidi>wnDate</bidi> بسازید و از توابع، رخداد ها و خصوصیات آن استفاده کنید. در زیر به آنها اشاره میشود.</p>
        <p>
            برای ساخت متغییر چند ویزگی وجود دارد.<br />
            <bidi>new WNDate()</bidi><br />
            نوع فرهنگ از wnConfig.cultureInfo گرفته میشود و تقویم از wnConfig.calendar همچنین مقدار پیش فرض صفر در نظر گرفته میشود.<br />
            <bidi>new WNDate(wnDate)</bidi><br />
            یک تاریخ جدید بر اساس تنظیمات فرهنگ و تقویم و مقدار آن میسازد.<br />
            <bidi>new WNDate(wnCultureInfo,wnCalendar)</bidi><br />
            یک تاریخ بر اساس فرهنگ و تقویم مد نظر میسازد.<br />
            <bidi>new WNDate(wnCultureInfo,wnCalendar,Date)</bidi><br />
            یک تاریخ بر اساس فرهنگ و تقویم و مقدار تاریخ استاندارد مد نظر میسازد.
        </p>
        <h2>توابع</h2>
        <p>
            <bidi>addDays(value)</bidi><br />
            به مقدار مشخص روز، به تاریخ اضافه میکند.
        </p>
        <p>
            <bidi>addMonths(value)</bidi><br />
            به مقدار مشخص برج، به تاریخ اضافه میکند.
        </p>
        <p>
            <bidi>addYears(value)</bidi><br />
            به مقدار مشخص سال، به تاریخ اضافه میکند.
        </p>
        <p>
            <bidi>addWeeks(value)</bidi><br />
            به مقدار مشخص هفته، به تاریخ اضافه میکند. در حقیقت این تابع همان تابع اضافه کردن روز است که عدد هفته در 7 ضرب میشود.
        </p>
        <p>
            <bidi>addHours(value)</bidi><br />
            به مقدار مشخص ساعت، به تاریخ اضافه میکند.
        </p>
        <p>
            <bidi>addMinutes(value)</bidi><br />
            به مقدار مشخص دقیقه، به تاریخ اضافه میکند.
        </p>
        <p>
            <bidi>addSeconds(value)</bidi><br />
            به مقدار مشخص ثانیه، به تاریخ اضافه میکند.
        </p>
        <p>
            <bidi>addMilliseconds(value)</bidi><br />
            به مقدار مشخص میلی ثانیه، به تاریخ اضافه میکند.
        </p>
        <p>
            <bidi>setDate(Date)</bidi><br />
            بر اساس تاریخ استاندارد میلادی، تبدیلات را انجام داده و تاریخ را تنظیم میکند.
        </p>
        <p>
            <bidi>setDateYMD(Year, Month, Day, Hour, Minute, Second, Millisecond)</bidi><br />
            بر اساس ورودی ها تاریخ را تنظیم میکند، مقدار ساعت، دقیقه، ثانیه و میلی ثانیه به صورت اختیاری است و مقدار پیش فرض صفر است.
        </p>
        <p>
            <bidi>setDateNumber(jd)</bidi><br />
            مقدار تاریخ را بر اساس روزهای گذشته از ابتدای تاریخ ژولین محاسبه و تنظیم میکند. این تابع برای تبدیل بین تقویم ها بسیار کاربردی است.
        </p>
        <p>
            <bidi>setDateString(string)</bidi><br />
            اگر تاریخ به صورت متنی است، آنرا تبدیل به تاریخ میکند، ترتیب ورودی، سال، ماه، روز، ساعت، دقیقه، ثانیه و میلی ثانیه است.
            اگر به هر دلیلی تعداد روزها بیشتر 31 بود، جای سال و روز خودکار تغییر میکند.
        </p>
        <p>
            <bidi>Set(wnDate)</bidi><br />
            بر اساس، یک تاریخ، این تاریخ را تنظیم میکند، اگر تقویم ها یکسان نباشند نیز تبدیلات انجام شده و سپس تنظیم میگردد.
        </p>
        <p>
            <bidi>toDateTime()</bidi><br />
            تاریخ تنظیم شده را به صورت تاریخ استاندارد بر میگرداند.
        </p>
        <p>
            <bidi>toNumber()</bidi><br />
            تاریخ تنظیم شده را به صورت تعداد روزها از ابتدای تاریخ ژولین بر میگرداند.
        </p>
        <p>
            <bidi>toNumberDate()</bidi><br />
            تاریخ تنظیم شده را به صورت تعداد روزها از ابتدای تاریخ ژولین بدون مقدار ساعت روز بر میگرداند.
        </p>
        <p>
            <bidi>toNumberYMD(Year, Month, Day)</bidi><br />
            تعداد روزهای سپری شده از ابتدای تاریخ ژولین، بر اساس سال، ماه و روز داده شده محاسبه کرده و عدد آنرا برمیگرداند.
        </p>
        <p>
            <bidi>toString(format, nativeDigit)</bidi><br />
            تاریخ را به صورت رشته برمیگرداند.<br />
            مقدار پارامتر format اختیاری است و به صورت پیش فرض از فرهنگ CultureInfo.DateTimeFormat.fullDateTimePattern گرفته میشود.
            اگر میخواهید فرمت خاصی داشته باشد، بر اساس استاندارد فورمت تاریخ، آنرا وارد کنید.<br />
            پارامتر nativeDigit، تعیین میکند، تبدیل اعداد بر اساس عدد مندرج در فرهنگ باشد یا خیر، این مقدار اختیاری است و از متغییر WNDefaultNativeDigit تنظیم میگردد.<br />
            برای مثال اعداد نمایشی برای فارسی عبارتند از"۰۱۲۳۴۵۶۷۸۹" در صورتیکه در محیط وب اعداد به این گونه شناخته میشود "0123456789" توجه داشته باشید، برای محاسبات این
            تبدیل قابل برگشت و محاسبه نیست و فقط برای نمایش کاربرد دارد.
        </p>
        <p>برای اطلاع بیشتر در خصوص انواع فورمت خروجی برای نمایش تاریخ میتوانید <a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings" target="_blank">اینجا</a> را مطالعه فرمایید.</p>
        <p>
            <bidi>toLongDateString(WNDefaultNativeDigit)</bidi><br />
            تبدیل تاریخ به رشته به صورت فرمت CultureInfo.DateTimeFormat.longDatePattern
        </p>
        <p>
            <bidi>toShortDateString(WNDefaultNativeDigit)</bidi><br />
            تبدیل تاریخ به رشته به صورت فرمت CultureInfo.DateTimeFormat.shortDatePattern
        </p>
        <p>
            <bidi>toLongTimeString(WNDefaultNativeDigit)</bidi><br />
            تبدیل تاریخ به رشته به صورت فرمت CultureInfo.DateTimeFormat.longTimePattern
        </p>
        <p>
            <bidi>toShortTimeString(WNDefaultNativeDigit)</bidi><br />
            تبدیل تاریخ به رشته به صورت فرمت CultureInfo.DateTimeFormat.shortTimePattern
        </p>
        <p>
            <bidi>fixedDate</bidi><br />
            اگر به هر دلیلی، توازن تاریخی بهم ریهخته باشد، برای مثال تعداد روزها بیشتر از روزهای یک برج باشند، این تابع آن توازن را برقرار کرده و تعداد روزهای اضافی را به
            برج بعدی منتقل میکند.
        </p>
        <h2>توابع مقایسه ای</h2>
        <p>
            <bidi>lessThan(wnDate)</bidi><br />
            تاریخ جاری از تاریخ داده شده کوچکتر است یا خیر.
        </p>
        <p>
            <bidi>lessThanEqual(wnDate)</bidi><br />
            تاریخ جاری از تاریخ داده شده کوچکتر یا مساوی است یا خیر.
        </p>
        <p>
            <bidi>greaterThan(wnDate)</bidi><br />
            تاریخ جاری از تاریخ داده شده بزرگتر است یا خیر.
        </p>
        <p>
            <bidi>greaterThanEqual(wnDate)</bidi><br />
            تاریخ جاری از تاریخ داده شده بزرگتر یا مساوی است یا خیر.
        </p>
        <p>
            <bidi>equal(wnDate)</bidi><br />
            تاریخ جاری از تاریخ داده شده برابر است یا خیر.
        </p>
        <p>
            <bidi>notEqual(wnDate)</bidi><br />
            تاریخ جاری از تاریخ داده شده برابر نیست یا خیر.
        </p>
        <p>
            <bidi>lessThanExact(wnDate)</bidi><br />
            تاریخ و ساعت جاری از تاریخ و ساعت داده شده کوچکتر است یا خیر.
        </p>
        <p>
            <bidi>lessThanEqualExact(wnDate)</bidi><br />
            تاریخ و ساعت جاری از تاریخ و ساعت داده شده کوچکتر یا مساوی است یا خیر.
        </p>
        <p>
            <bidi>greaterThanExact(wnDate)</bidi><br />
            تاریخ و ساعت جاری از تاریخ و ساعت داده شده بزرگتر است یا خیر.
        </p>
        <p>
            <bidi>greaterThanEqualExact(wnDate)</bidi><br />
            تاریخ و ساعت جاری از تاریخ و ساعت داده شده بزرگتر یا مساوی است یا خیر.
        </p>
        <p>
            <bidi>equalExact(wnDate)</bidi><br />
            تاریخ و ساعت جاری از تاریخ و ساعت داده شده برابر است یا خیر.
        </p>
        <p>
            <bidi>notEqualExact(wnDate)</bidi><br />
            تاریخ و ساعت جاری از تاریخ و ساعت داده شده برابر نیست یا خیر.
        </p>
        <h2>خصوصیات</h2>
        <p>
            <bidi>Year</bidi><br />
            تنظیم یا دریافت سال در تقویم تنظیم شده.
        </p>
        <p>
            <bidi>Month</bidi><br />
            تنظیم یا دریافت برج در تقویم تنظیم شده.
        </p>
        <p>
            <bidi>Day</bidi><br />
            تنظیم یا دریافت روز در تقویم تنظیم شده.
        </p>
        <p>
            <bidi>Hour</bidi><br />
            تنظیم یا دریافت ساعت در تقویم تنظیم شده.
        </p>
        <p>
            <bidi>Minute</bidi><br />
            تنظیم یا دریافت دقیقه در تقویم تنظیم شده.
        </p>
        <p>
            <bidi>Second</bidi><br />
            تنظیم یا دریافت ثانیه در تقویم تنظیم شده.
        </p>
        <p>
            <bidi>Milliseconds</bidi><br />
            تنظیم یا دریافت میلی ثانیه در تقویم تنظیم شده.
        </p>
        <p>
            <bidi>DayOfWeek</bidi><br />
            دریافت روز هفته تاریخ تنظیم شده.
        </p>
        <p>
            <bidi>DayOfYear</bidi><br />
            دریافت تعداد روزهای گذشته از ابتدای سال تقویم جاری.
        </p>
        <p>
            <bidi>DaysInMonth</bidi><br />
            تعداد روزهای موجود در سال و برج تنظیم شده.
        </p>
        <p>
            <bidi>DaysInYear</bidi><br />
            تعداد روزهای سال تنظیم شده.
        </p>
        <p>
            <bidi>isLeapYear</bidi><br />
            سال تنظیم شده کبیسه است یا خیر.
        </p>
        <p>
            <bidi>isLeapMonth</bidi><br />
            برج تنظیم شده، برج کبیسه است یا خیر.
        </p>
        <p>
            <bidi>isLeapDay</bidi><br />
            سال، برج و روز تنظیم شده، روز کبیسه است یا خیر.
        </p>
        <p>
            <bidi>MonthsInYear</bidi><br />
            تعداد برجهای موجود در یک سال.
        </p>
        <p>
            <bidi>LeapMonth</bidi><br />
            برج کبیسه کدام برج است.
        </p>
        <p>
            <bidi>WeekOfYear</bidi><br />
            تاریخ تنظیم شده، چندمین هفته سال است.
        </p>
        <p>
            <bidi>Value</bidi><br />
            تنظیم مقدار تاریخی، که بر اساس نوع وروی، تنظیمات انجام میشود. مقدار عددی از ابتدای سال ژولین برگردانده میشود.
        </p>
        <h2>مثال تاریخ امروز</h2>
        <div class="example-div">
            <div class="ltr">
                Julian: <span id="JulianCalendar_ltr"></span><br />
                Gregorian: <span id="GregorianCalendar_ltr"></span><br />
                Persian: <span id="PersianCalendar_ltr"></span><br />
                Hijri: <span id="HijriCalendar_ltr"></span><br />
                <script>
                    wnConfig.cultureInfo = new WNCultureInfo_en_US();
                    let dateJulianCalendar = new WNDate(wnConfig.cultureInfo, new WNJulianCalendar(), new Date());
                    let dateGregorianCalendar = new WNDate(wnConfig.cultureInfo, new WNGregorianCalendar(), new Date());
                    let datePersianCalendar = new WNDate(wnConfig.cultureInfo, new WNPersianCalendar(), new Date());
                    let dateHijriCalendar = new WNDate(wnConfig.cultureInfo, new WNHijriCalendar(), new Date());
                    document.getElementById('JulianCalendar_ltr').innerHTML = dateJulianCalendar.toString();
                    document.getElementById('GregorianCalendar_ltr').innerHTML = dateGregorianCalendar.toString();
                    document.getElementById('PersianCalendar_ltr').innerHTML = datePersianCalendar.toString();
                    document.getElementById('HijriCalendar_ltr').innerHTML = dateHijriCalendar.toString();
                </script>
            </div>
            <div class="rtl" id="form1">
                ژولین: <span id="JulianCalendar_rtl"></span><br />
                میلادی: <span id="GregorianCalendar_rtl"></span><br />
                پارسی، جلالی، هجری شمسی: <span id="PersianCalendar_rtl"></span><br />
                هجری قمری: <span id="HijriCalendar_rtl"></span><br />
                <script>
                    wnConfig.cultureInfo = new WNCultureInfo_fa_IR();
                    dateJulianCalendar = new WNDate(wnConfig.cultureInfo, new WNJulianCalendar(), new Date());
                    dateGregorianCalendar = new WNDate(wnConfig.cultureInfo, new WNGregorianCalendar(), new Date());
                    datePersianCalendar = new WNDate(wnConfig.cultureInfo, new WNPersianCalendar(), new Date());
                    dateHijriCalendar = new WNDate(wnConfig.cultureInfo, new WNHijriCalendar(), new Date());
                    document.getElementById('JulianCalendar_rtl').innerHTML = dateJulianCalendar.toString();
                    document.getElementById('GregorianCalendar_rtl').innerHTML = dateGregorianCalendar.toString();
                    document.getElementById('PersianCalendar_rtl').innerHTML = datePersianCalendar.toString();
                    document.getElementById('HijriCalendar_rtl').innerHTML = dateHijriCalendar.toString();
                </script>
            </div>
        </div>
        <div class="alert info callout-start">
            توجه داشته باشید در تاریخ هجری قمری، ممکن است تا 2 روز اختلاف باشد که با تنظیم خصوصیت hijriAdjustment در تقویم هجری قمری، این اختلاف حل میشود.
            برای عدم تکرار تنظیم نیز میتوانید با تنظیم متغییر wnConfig.hijriAdjustment از تکرار آن جلوگیری کنید.
        </div>
        <figure><code data-on="form1"></code></figure>
