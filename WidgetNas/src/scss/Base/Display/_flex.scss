@import "../../_variables.scss";
@import "../../_functions.scss";

.d-flex {
    display: flex !important;
}

.justify-content-start {
    justify-content: flex-start !important;
}

.justify-content-end {
    justify-content: flex-end !important;
}

.justify-content-center {
    justify-content: center !important;
}

.justify-content-between {
    justify-content: space-between !important;
}

.justify-content-around {
    justify-content: space-around !important;
}

.justify-content-evenly {
    justify-content: space-evenly !important;
}

.align-items-start {
    align-items: flex-start !important;
}

.align-items-end {
    align-items: flex-end !important;
}

.align-items-center {
    align-items: center !important;
}

.align-items-baseline {
    align-items: baseline !important;
}

.align-items-stretch {
    align-items: stretch !important;
}

.align-content-start {
    align-content: flex-start !important;
}

.align-content-end {
    align-content: flex-end !important;
}

.align-content-center {
    align-content: center !important;
}

.align-content-between {
    align-content: space-between !important;
}

.align-content-around {
    align-content: space-around !important;
}

.align-content-stretch {
    align-content: stretch !important;
}

.align-self-auto {
    align-self: auto !important;
}

.align-self-start {
    align-self: flex-start !important;
}

.align-self-end {
    align-self: flex-end !important;
}

.align-self-center {
    align-self: center !important;
}

.align-self-baseline {
    align-self: baseline !important;
}

.align-self-stretch {
    align-self: stretch !important;
}


.row {
    display: flex;
    flex-wrap: wrap;
    & > * {
        flex-shrink: 0;
        width: 100%;
        max-width: 100%;
        margin-inline-end: calc(var(--gutter-inline) / 2);
        margin-inline-start: calc(var(--gutter-inline) / 2);
        margin-block-start: calc(var(--gutter-block) / 2);
        margin-block-end: calc(var(--gutter-block) / 2);
    }
}

.col {
    flex: 1 0 0%;
}

.row-col-auto > *,
.col-auto {
    flex: 0 0 auto;
    width: auto;
}

@include media() using ($media) {
    @for $i from 1 through $grid-columns {
        .row-col-#{$i}#{$media} > * {
            flex: 0 0 auto;
            width: #{percentage(1 / $i )};
        }

        .col-#{$i}#{$media} {
            flex: 0 0 auto;
            width: #{percentage($i / $grid-columns)};
        }
    }

    .d-none#{$media} {
        display:none;
    }
}

.flex-fill {
    flex: 1 1 auto !important;
}

.flex-row {
    flex-direction: row !important;
}

.flex-column {
    flex-direction: column !important;
}

.flex-row-reverse {
    flex-direction: row-reverse !important;
}

.flex-justified {
    flex-basis: 0;
    flex-grow: 1;
}

@media (max-width: map-get($breakpoints,'m')) {

    .col,
    .col-1,
    .col-2,
    .col-3,
    .col-4,
    .col-5,
    .col-6,
    .col-7,
    .col-8,
    .col-9,
    .col-10,
    .col-11,
    .col-12 {
        width: 100% !important;
    }
}

.order-first {
    order: 0 !important;
}

.order-1 {
    order: 1 !important;
}

.order-2 {
    order: 2 !important;
}

.order-3 {
    order: 3 !important;
}

.order-4 {
    order: 4 !important;
}

.order-5 {
    order: 5 !important;
}

.order-6 {
    order: 6 !important;
}

.order-7 {
    order: 7 !important;
}

.order-8 {
    order: 8 !important;
}

.order-last {
    order: 9 !important;
}
